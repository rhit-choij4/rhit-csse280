"use strict";const{createCanvas:createCanvas,loadImage:loadImage}=require("canvas");async function fromCanvas(t,r,i,n){const s=await loadImage(t),e=createCanvas(r,i);e.width=r,e.height=i;const a=e.getContext("2d");a.drawImage(s,0,0,r,i);const o=a.getImageData(0,0,r,i).data,c=[];let u;for(let t=0;t<i;t+=2)for(let i=0;i<r;i++){const s=4*(t*r+i),e=[o[s],o[s+1],o[s+2],o[s+3]];0===i&&(u=[],n?n(u):c.push(u)),n?n(e):u.push(e)}return c}const defaultCharList=" .,:;i1tfLCG08@",defaultColorCharList=" CGO08@",convertHtmlChars={" ":"&nbsp;"},rgbHtmlStr=(t,r,i)=>"rgb("+[t,r,i].join(",")+");";function toAscii({chars:t,isInvert:r,isHtmlColor:i,isBlock:n,isOpacity:s,isRaw:e}){let a=[];const o=(t||(i?defaultColorCharList:defaultCharList)).split("");function c(t){if(0===t.length){if(0===a.length)return;return void a.push(i?"<br/>":e?["",[]]:"\n")}const[c,u,h]=t,l=(.3*c+.59*u+.11*h)/255;let f=o.length-1-Math.round(l*(o.length-1));r&&(f=o.length-1-f);let d=o[f];i&&convertHtmlChars[d]&&(d=convertHtmlChars[d]);const p=function(t,[r,e,a,o]){if(!i)return;return"<span style='color:"+rgbHtmlStr(r,e,a)+(n?"background-color:"+rgbHtmlStr(r,e,a):"")+(s?"opacity:"+o/255+";":"")+"'>"+t+"</span>"}(d,t)||function(t,[r,i,n,s]){if(!e)return;return[t,[r,i,n,s]]}(d,t)||d;a.push(p)}function u(t){if(!Array.isArray(t))return e?JSON.stringify(a):a.join("");a=t}return{asciiChars:u,pixel:c,pixels:function(t){return t.forEach(t=>{t.forEach(t=>{c(t)}),c([])}),u()}}}const fs=require("fs");var dir=new function(){this.scan=async function(t,r){if(""===t||"/"===t)return console.error("Error: directory to scan cannot be empty."),console.error('If you want to scan your script location, please use "dir2array.Scan(__dirname);"'),null;if("/"!==t.slice(-1)&&(t+="/"),!this.dirExists(t))return;const i=async t=>fs.readdirSync(t).sort().reduce(async(n,s)=>{await n;const e=t+s;return this.dirExists(e)?i(e+"/"):r(e)},Promise.resolve());return i(t)},this.dirExists=function(t){try{return fs.lstatSync(t).isDirectory()}catch(t){return!1}},this.fileExists=function(t){try{return fs.existsSync(t)}catch(t){return!1}}};const{promisify:promisify}=require("util"),{URL:URL}=require("url"),http=require("http"),https=require("https"),sizeOf=require("image-size");var dimensions=async t=>{if(dir.fileExists(t))return promisify(sizeOf)(t);const r=new URL(t);return new Promise(i=>{(t.startsWith("https:")?https:http).get(r,t=>{const r=[];t.on("data",t=>{r.push(t)}).on("end",()=>{const t=Buffer.concat(r);i(sizeOf(t))})})})};const defaultWidth=100;async function calcDimensions({width:t,height:r},i){if(t&&r)return{width:t,height:r};let n=t,s=r;const e=await dimensions(i);if(n||s||(n=defaultWidth),n){const t=e.width/n;s=Math.round(e.height/t)}else{const t=e.height/s;n=Math.round(e.width/t)}return{width:n,height:s}}async function asciiImgCanvasNodejs(t,r={}){if(!t||"string"!=typeof t)throw new TypeError("Invalid image source value: "+t);if("object"!=typeof r)throw new TypeError("Invalid options: "+r);const i=r.chars||null,n=!0===r.opacity,s=!0===r.block,e=!0===r.htmlColor,a=!0===r.invert,o=!0===r.raw,c=!1!==r.stream,{width:u,height:h}=await calcDimensions(r,t),l=toAscii({chars:i,isInvert:a,isBlock:s,isOpacity:n,isHtmlColor:e,isRaw:o});if(c)return await fromCanvas(t,u,h,l.pixel),l.asciiChars();const f=await fromCanvas(t,u,h);return l.pixels(f)}module.exports=asciiImgCanvasNodejs;
