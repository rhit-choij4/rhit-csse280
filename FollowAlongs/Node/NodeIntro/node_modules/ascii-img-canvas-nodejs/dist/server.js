#!/usr/bin/env node
"use strict";var validateArgs={block:Boolean,chars:String,height:Number,htmlColor:Boolean,invert:Boolean,opacity:Boolean,raw:Boolean,width:Number,writeFileWithTag:String};const{createCanvas:createCanvas,loadImage:loadImage}=require("canvas");async function fromCanvas(t,r,e,s){const i=await loadImage(t),n=createCanvas(r,e);n.width=r,n.height=e;const o=n.getContext("2d");o.drawImage(i,0,0,r,e);const a=o.getImageData(0,0,r,e).data,c=[];let u;for(let t=0;t<e;t+=2)for(let e=0;e<r;e++){const i=4*(t*r+e),n=[a[i],a[i+1],a[i+2],a[i+3]];0===e&&(u=[],s?s(u):c.push(u)),s?s(n):u.push(n)}return c}const defaultCharList=" .,:;i1tfLCG08@",defaultColorCharList=" CGO08@",convertHtmlChars={" ":"&nbsp;"},rgbHtmlStr=(t,r,e)=>"rgb("+[t,r,e].join(",")+");";function toAscii({chars:t,isInvert:r,isHtmlColor:e,isBlock:s,isOpacity:i,isRaw:n}){let o=[];const a=(t||(e?defaultColorCharList:defaultCharList)).split("");function c(t){if(0===t.length){if(0===o.length)return;return void o.push(e?"<br/>":n?["",[]]:"\n")}const[c,u,l]=t,f=(.3*c+.59*u+.11*l)/255;let h=a.length-1-Math.round(f*(a.length-1));r&&(h=a.length-1-h);let p=a[h];e&&convertHtmlChars[p]&&(p=convertHtmlChars[p]);const d=function(t,[r,n,o,a]){if(!e)return;return"<span style='color:"+rgbHtmlStr(r,n,o)+(s?"background-color:"+rgbHtmlStr(r,n,o):"")+(i?"opacity:"+a/255+";":"")+"'>"+t+"</span>"}(p,t)||function(t,[r,e,s,i]){if(!n)return;return[t,[r,e,s,i]]}(p,t)||p;o.push(d)}function u(t){if(!Array.isArray(t))return n?JSON.stringify(o):o.join("");o=t}return{asciiChars:u,pixel:c,pixels:function(t){return t.forEach(t=>{t.forEach(t=>{c(t)}),c([])}),u()}}}const fs=require("fs");var dir=new function(){this.scan=async function(t,r){if(""===t||"/"===t)return console.error("Error: directory to scan cannot be empty."),console.error('If you want to scan your script location, please use "dir2array.Scan(__dirname);"'),null;if("/"!==t.slice(-1)&&(t+="/"),!this.dirExists(t))return;const e=async t=>fs.readdirSync(t).sort().reduce(async(s,i)=>{await s;const n=t+i;return this.dirExists(n)?e(n+"/"):r(n)},Promise.resolve());return e(t)},this.dirExists=function(t){try{return fs.lstatSync(t).isDirectory()}catch(t){return!1}},this.fileExists=function(t){try{return fs.existsSync(t)}catch(t){return!1}}};const{promisify:promisify}=require("util"),{URL:URL}=require("url"),http=require("http"),https=require("https"),sizeOf=require("image-size");var dimensions=async t=>{if(dir.fileExists(t))return promisify(sizeOf)(t);const r=new URL(t);return new Promise(e=>{(t.startsWith("https:")?https:http).get(r,t=>{const r=[];t.on("data",t=>{r.push(t)}).on("end",()=>{const t=Buffer.concat(r);e(sizeOf(t))})})})};const defaultWidth=100;async function calcDimensions({width:t,height:r},e){if(t&&r)return{width:t,height:r};let s=t,i=r;const n=await dimensions(e);if(s||i||(s=defaultWidth),s){const t=n.width/s;i=Math.round(n.height/t)}else{const t=n.height/i;s=Math.round(n.width/t)}return{width:s,height:i}}async function asciiImgCanvasNodejs(t,r={}){if(!t||"string"!=typeof t)throw new TypeError("Invalid image source value: "+t);if("object"!=typeof r)throw new TypeError("Invalid options: "+r);const e=r.chars||null,s=!0===r.opacity,i=!0===r.block,n=!0===r.htmlColor,o=!0===r.invert,a=!0===r.raw,c=!1!==r.stream,{width:u,height:l}=await calcDimensions(r,t),f=toAscii({chars:e,isInvert:o,isBlock:i,isOpacity:s,isHtmlColor:n,isRaw:a});if(c)return await fromCanvas(t,u,l,f.pixel),f.asciiChars();const h=await fromCanvas(t,u,l);return f.pixels(h)}require("dotenv").config();const cors=require("cors")(),compression=require("compression")(),fastify=require("fastify")({logger:process.env.SERVER_LOG||!1}),[_port,_ip]=process.argv.slice(2);function queryToOpts(t){return Object.keys(t).reduce((r,e)=>(validateArgs[e]&&(r[e]=validateArgs[e](t[e])),r),{})}const postOpts=Object.freeze({schema:{body:{type:"array"}}});function doGet(t,r){return asciiImgCanvasNodejs(t,r)}function doPost(t,r){return Promise.all(t.map(t=>asciiImgCanvasNodejs(t,r)))}fastify.use(cors),fastify.use(compression),fastify.get("/",()=>{const t=Object.keys(validateArgs);return{GET:"/img?url=&"+t.join("=&")+"= >>> response of text/html ",POST:"/imgs="+t.join("=&")+'= + application/json body of ["url1", "url2", "url3", ...]'}}),fastify.get("/img",(t,r)=>{const{url:e}=t.query,s=queryToOpts(t.query);return r.type("text/html").code(200),doGet(e,s)}),fastify.post("/imgs",postOpts,(t,r)=>{const e=queryToOpts(t.query),{body:s}=t;return r.type("application/json").code(200),doPost(s,e)}),fastify.listen(Number(process.env.PORT||_port)||3e3,process.env.IP||_ip||"0.0.0.0",(t,r)=>{if(t)throw console.log(`START UP ERROR: ${t}`),t;console.log(`Server listening on ${r}`)});
